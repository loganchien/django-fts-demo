# Generated by Django 2.0 on 2018-01-07 23:17

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('fts', '0004_comment'),
    ]

    operations = [
        migrations.RunSQL(
            sql='''
            CREATE OR REPLACE FUNCTION update_article_search_vector()
            RETURNS TRIGGER
            LANGUAGE plpgsql AS $$
            BEGIN
              SELECT
                setweight(to_tsvector(
                  coalesce(NEW.headline, '')), 'A') ||
                setweight(to_tsvector(
                  coalesce(NEW.content, '')), 'B') ||
                setweight(to_tsvector(
                  (SELECT coalesce(string_agg(content, ' '), '')
                   FROM fts_comment WHERE article_id = NEW.id)), 'C')
              INTO NEW.search_vector;
              RETURN NEW;
            END;
            $$;

            CREATE OR REPLACE FUNCTION insert_comment()
            RETURNS TRIGGER
            LANGUAGE plpgsql AS $$
            BEGIN
              UPDATE fts_article SET search_vector = NULL
              WHERE id = NEW.article_id;
              RETURN NEW;
            END;
            $$;

            CREATE OR REPLACE FUNCTION update_comment()
            RETURNS TRIGGER
            LANGUAGE plpgsql AS $$
            BEGIN
              UPDATE fts_article SET search_vector = NULL
              WHERE id = NEW.article_id;
              IF (OLD.article_id <> NEW.article_id) THEN
                UPDATE fts_article SET search_vector = NULL
                WHERE id = OLD.article_id;
              END IF;
              RETURN NEW;
            END;
            $$;

            CREATE OR REPLACE FUNCTION delete_comment()
            RETURNS TRIGGER
            LANGUAGE plpgsql AS $$
            BEGIN
              UPDATE fts_article SET search_vector = NULL
              WHERE id = OLD.article_id;
              RETURN OLD;
            END;
            $$;

            CREATE TRIGGER comment_insert_trigger
            AFTER INSERT ON fts_comment
            FOR EACH ROW EXECUTE PROCEDURE insert_comment();

            CREATE TRIGGER comment_update_trigger
            AFTER UPDATE OF article_id, content ON fts_comment
            FOR EACH ROW EXECUTE PROCEDURE update_comment();

            CREATE TRIGGER comment_delete_trigger
            AFTER DELETE ON fts_comment
            FOR EACH ROW EXECUTE PROCEDURE delete_comment();

            ''',
            reverse_sql='''
            DROP TRIGGER IF EXISTS comment_insert_trigger
            ON fts_comment;

            DROP TRIGGER IF EXISTS comment_update_trigger
            ON fts_comment;

            DROP TRIGGER IF EXISTS comment_delete_trigger
            ON fts_comment;

            DROP FUNCTION IF EXISTS insert_comment();
            DROP FUNCTION IF EXISTS update_comment();
            DROP FUNCTION IF EXISTS delete_comment();

            CREATE OR REPLACE FUNCTION update_article_search_vector()
            RETURNS TRIGGER
            LANGUAGE plpgsql AS $$
            BEGIN
              SELECT
                setweight(to_tsvector(
                  coalesce(NEW.headline, '')), 'A') ||
                setweight(to_tsvector(
                  coalesce(NEW.content, '')), 'B')
              INTO NEW.search_vector;
              RETURN NEW;
            END;
            $$;

            UPDATE fts_article SET search_vector = NULL;
            '''),
    ]
